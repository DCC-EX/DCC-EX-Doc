DCC++EX   mySetup.h

This new DCC++EX 3.1 file feature allows users to manually create a file called mySetup.h 
Its purpose is to allow users to add additional custom code to be inserted in the setup() routine phase of the Command Station CS.
Inside mySetup.h you can enter standard preferred command values to customize your CS to start DCC++EX and set it up at runtime.  
This mySetup.h file is an optional, user specific flie that doesn't exist in the standard CommandStation-EX.zip file, 
you have to create it once you open CommandStation-EX.ino sketch in the Arduino Editor.
Future DCC++EX releases will not overwrite it or replaced it when you download a new version of the CommandStation-EX code. 
It stays as is and unique to your layout until you specifically choose to make future changes to it through a Arduino IDE or other editor.
 
Once you've tested different ranges and setup scenarios that meet your particular layout needs you create a mySetup.h file{tab} and sequentially type command values in.
Make sure you capitalize the "S" .  

Initial startup loads the Wifi/Ethernet setup and the DCCWaveform first then your custom  mySetup.h file is started.
The file must contain valid C/C++ code for the context in which it intended. (don't worry, just follow and edit the examples).

Once you've created the mySetup.h file and you are ready to cusomize your CS, open the CommandStation-EX.ino sketch, tab to the new mySetup.h file.
We have a growing number of settings and overrides that you can enter and change in this way, such as starting with the power on, change ACK settings,
add a custom motor board, entering messages to display on LCD's, etc.   
You can preenter SETUP(commands) and comment out // in front of SETUP line so that it is not used time during the current startup.
We are in the process of futher documenting these features.

Examples for using mySetup.h user file:

SETUP("<1 MAIN>");  // Start with power to the main track on. Entering just a "1" would turn both Main & Prog tracks on
SETUP("<D ACK MAX 9000>");  // Set maxAckPulseDuration ACK detection to allow pulses up to 9000 microseconds long. Set this to a number larger than the Highest Pulse = "xxxxx us" you get from <R> command 
SETUP("<D ACK LIMIT 50>"); // Override Std default of ackLimitmA = 60 by tuning it with 70, 65, 55, 50,45, 40 etc. to try and improve CV reads on the Programming track
SETUP("<1 JOIN>");  // Start with 2 main power districts instead of a "Main" and a "Prog" , you have "Main" and a "Main"  East bound and West bound.

DCC++EX command reference List: https://dcc-ex.com/reference/software/command-reference.html
All Command Station commands are valid but some make little sense to use at during startup (E.g prog-track reads/writes) theae are best used when needed after initial startup.

One example of SETUP<"command"> would be to Improve the Max Duration Pulse Range for Reading a decoder;

To test a longer Ack duration range potential fix for a decoder that won't read or acknowledge Without having to going into sketch code, 
you would first test it by enterng a command line <D ACK MAX 9000> via a Serial Monitor.  

Open the IDE Serial Monitor screen and enter the commands;
<1>                 power on
<D ACK ON>          display commands
<D ACK MAX 9000>	  increases upper limit max to 9000

Test the decoder enter the commands; 
<R>         read and display DCC address
<R 8 1 1>   read and display Mfg ID

Repeat <D ACK MAX 9500> add 500 units and retest until the  decoder reads & responds with actual CV data.. and it reads the highest pulse = "xxxxx us" result.

Note; Ack must be at least 60mA for 6ms +/- 1ms (so 5000 - 7000 microseconds are allowed as a Standard default)
Despite this, we currently check for pulses as short at 2000us and as long at 8500us, which is all ready a full 1500us out of standard specification on the upper end.
Some decoder exceed even that extra fudge factor like QSI decoders which we've found pulse rates up to 11308ms.  
So for older QSI you would set the maxAckPulseDuration = 11500.   
In addition by lowering the ackLimitmA to 45 we where able to further improve reading the QSI decoder.

The program track is limited to 250mA according to the NMRA standard, but we can also override that.

We're looking at what we can do to accommodate those scenarios when older decoders refuse to cooperate and if we should up the MAX in the next version.

*************************************************************************************************************************************************************


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Other Notes for documentation:

Our routines are much faster than DCC++ and we don't block code like it the original DCC++ did. So we wouldn't miss important events. 
We even check for the response in between packets now instead of waiting for all the packets and repeats to get sent.  
That is another reason why the original DCC++ Classic can miss ACKs Acknowledge signals.
The DCC controller (PC & Pi) sends a string command and we process it.  For CVs, that all happens with EX and the loco. 
JMRI (or another controller/cab) sends the command, the decoder obviously got the instruction if we see pulses back, 
and then we report success or failure to JMRI.  But it has to poll the CV; "are you a one or a zero?  
Ok, next, are you a one or a zero?  It goes through the entire byte, then verifies it. 
DCC++ EX is also faster because once it gets an ACK, it stops sending repeat packets. 
If the decoder/motor combination, or dirty track when it jumps a bit, or any number of things goes wrong, it can miss even with repeated commands.  
While it is possible JMRI on a computer (PC, Linux, Pi) it could miss a response when parsing all the things it is seeing fed to it on the serial line,
it is usually a missed acknowledgement because of timing, too little current, or the loco/decoder/track. 
We will continue to add things we find from particular decoders.  
We even thought of having specific changes that we provide in an example "mySetup.h" file to tweak settings for decoders that need more settle time
or have longer ack pulses like some QSI & other decoders.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
